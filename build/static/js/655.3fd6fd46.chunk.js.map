{"version":3,"file":"static/js/655.3fd6fd46.chunk.js","mappings":"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","sources":["webpack://genie/./src/components/common/Button/Button.module.scss?2519","components/common/Button/Button.js","webpack://genie/./src/components/common/RowContainer/RowContainer.module.scss?dc3b","components/common/RowContainer/RowContainer.js","webpack://genie/./src/components/DeviceName/DeviceName.module.scss?5720","webpack://genie/./src/components/renderCells/RockCell/RockCell.module.scss?c841","components/renderCells/RockCell/RockCell.js","webpack://genie/./src/components/Wells/Wells.module.scss?8739","constants/helps.js","webpack://genie/./src/components/Wells/WellsStatus/WellsStatus.module.scss?8cba","components/Wells/WellsStatus/WellsStatus.js","components/Wells/Wells.js","api/strainApi.js","components/SelectInputChange/SelectInputChange.module.scss","components/SelectInputChange/SelectInputChange.js","components/authorization/AuthorizationWrapper.js","components/DeviceName/DeviceName.js","redux/actions/materialsActions.js","webpack://genie/./src/components/common/CustomTabs/CustomTabs.module.scss?2c98","components/common/CustomTabs/CustomTabs.js","webpack://genie/./src/components/common/SearchBar/SearchBar.module.scss?018e","components/common/SearchBar/SearchBar.js","webpack://genie/./src/components/MaterialList/MaterialList.module.scss?f40b","webpack://genie/./src/components/MaterialList/MaterialRow/MaterialRow.module.scss?8ba6","components/MaterialList/MaterialRow/MaterialRow.js","components/MaterialList/MaterialList.js","webpack://genie/./src/components/SelectInput/SelectInput.module.scss?bab2","components/SelectInput/SelectInput.js","webpack://genie/./src/components/DNAMaterials/DNAMaterials.module.scss?08ec","components/common/SnackbarUI/SnackbarUI.js","components/common/ConfirmationDialog/ConfirmationDialog.js","components/DNAMaterials/DNAMaterials.js","api/materialsApi.js","webpack://genie/./src/components/TopBar/TopBar.module.scss?88bf","webpack://genie/./src/components/renderCells/MaterialCell/MaterialCell.module.scss?f8c6","components/renderCells/MaterialCell/MaterialCell.js","components/TopBar/TopBar.js","api/cropsApi.js","redux/actions/deviceConfigActions.js","api/wellsApi.js","redux/actions/strainActions.js","pages/StoreStock/StoreStock.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"mainPrimary\":\"#009dba\",\"common\":\"Button_common__sJdcN\",\"actionSecondaryFormBtn\":\"Button_actionSecondaryFormBtn__UO6Qe\",\"actionListingBtn\":\"Button_actionListingBtn__kuQqS\",\"actionFormBtn\":\"Button_actionFormBtn__7wdO3\"};","import * as React from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport PropTypes from \"prop-types\";\r\nimport classes from \"./Button.module.scss\"\r\n\r\nexport const CLASS_TYPES=\r\n     {ACTION_LISTING_BTN:\"actionListingBtn\",\r\n      ACTION_FORM_BTN:\"actionFormBtn\",\r\n      ACTION_SECONDARY_FORM_BTN:\"actionSecondaryFormBtn\"}\r\n\r\n\r\n\r\nconst CustomButton = ({ classType ,className=null , label  , ...props }) => {\r\n  const classesValue=`${classes.common} ${classType?classes[classType]:\"\"} ${className?className:\"\"}`;\r\n \r\n  return (\r\n   <Button variant=\"contained\" className={`${classesValue}`} {...props}>\r\n    {label}\r\n  </Button>);\r\n}\r\n\r\nexport default React.memo(CustomButton);\r\n\r\nCustomButton.propTypes = {\r\n  classType: PropTypes.string,             // Class Type one of defined custom type ex: listing ,form \r\n  className: PropTypes.string,             // Pass custom class from calling component\r\n  label: PropTypes.string.isRequired       // Button Label\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"mainPrimary\":\"#009dba\",\"RowWrapper\":\"RowContainer_RowWrapper__oH+3q\"};","import React from \"react\";\r\nimport classes from \"./RowContainer.module.scss\"\r\n\r\n\r\n\r\nconst RowContainer = ({ children, className, ...res }) => {\r\n  return (\r\n    <div className={classes.RowWrapper + ' ' + className} {...res}>\r\n      {children}\r\n    </div>);\r\n}\r\n\r\nexport default React.memo(RowContainer);\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"mainPrimary\":\"#009dba\",\"compWrapper\":\"DeviceName_compWrapper__nxjhj\",\"AddressWrapper\":\"DeviceName_AddressWrapper__JGU1K\",\"DeviceName\":\"DeviceName_DeviceName__mLF+A\",\"BoxPosition\":\"DeviceName_BoxPosition__F3XFI\",\"ActionWrapper\":\"DeviceName_ActionWrapper__P0m6h\",\"BoxButtons\":\"DeviceName_BoxButtons__4tDg6\",\"RackDropDown\":\"DeviceName_RackDropDown__TLJpP\"};","// extracted by mini-css-extract-plugin\nexport default {\"mainPrimary\":\"#009dba\",\"CellWrapper\":\"RockCell_CellWrapper__SbJSo\"};","import React from \"react\";\r\n\r\nimport classes from \"./RockCell.module.scss\"\r\nconst RockCell = ({ option, ...res }) => {\r\n\r\n  return (\r\n    <div className={classes.CellWrapper}  {...res}>\r\n      <div>{option.name}</div>  \r\n       {/* <span>{option.unplaced} unplaced</span> */}\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default RockCell;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"mainPrimary\":\"#009dba\",\"PageWrapper\":\"Wells_PageWrapper__buYX9\",\"Well\":\"Wells_Well__t1Afh\",\"activeWell\":\"Wells_activeWell__Ko7b9\",\"TooltipText\":\"Wells_TooltipText__Tauoe\",\"Wells\":\"Wells_Wells__Ynu2E\",\"EmptyState\":\"Wells_EmptyState__riU1X\"};","\r\n// helps function check if value is a number or not\r\nexport const isNumeric = (val) => /^-?\\d+$/.test(val);\r\n\r\n//helps function find object from array by name of props\r\nexport const findObjFromArrayByProp = (array, prop, value) => {\r\n    return array.find(v => v[prop] === value);\r\n}\r\n\r\n// helps function check if value is a number or not\r\nexport const handelDateFormatter = (date, options = { day: '2-digit', month: 'short', year: 'numeric' }) => {\r\n    return new Date(date).toLocaleDateString(\"en-US\", options)\r\n};\r\n\r\n\r\n\r\n// helps function sort ascending or descending and return new array\r\nexport const sortMaterials = (list, key) => {\r\n    if (!list || !key) return\r\n    let newList = [...list]\r\n\r\n    switch (key) {\r\n        case \"ascending\":\r\n            return newList.sort((a, b) => (+a.constructName) - (+b.constructName));\r\n        case \"descending\":\r\n            return newList.sort((a, b) => (b.constructName) - (a.constructName));\r\n        case \"nto\":\r\n            return newList.sort((a, b) => (new Date(b.handoffDate) - new Date(a.handoffDate)));\r\n        case \"otn\":\r\n            return newList.sort((a, b) => (new Date(a.handoffDate) - new Date(b.handoffDate)));\r\n\r\n        default:\r\n            return newList\r\n    }\r\n\r\n}\r\n\r\n// helps function filter materials and  return new array\r\nexport const filterMaterials = (list, key) => {\r\n    if (!list || !key) return\r\n    let newList = [...list]\r\n\r\n    switch (key) {\r\n        case \"placed\":\r\n            return newList.filter((item) => item.locationId ? true : false);\r\n        case \"unplaced\":\r\n            return newList.filter((item) => item.locationId ? false : true);\r\n        case \"expired\":\r\n            return newList.filter((item) => item.expired === true);\r\n        case \"all\":\r\n            return newList\r\n\r\n        default:\r\n            return newList\r\n    }\r\n\r\n}\r\n// helps function filter materials and  return new array\r\nexport const getMaterialsCategoriesCount = (list, tabList) => {\r\n    if (!list || !tabList) return;\r\n    let newTabList = [...tabList]\r\n    newTabList.map(key => key.count = filterMaterials(list, key.key).length)\r\n    return newTabList\r\n}\r\n\r\n\r\n// helps function filter by prop name  and  return new array\r\nexport const filterByProps = (list, prop, key) => {\r\n\r\n    if (!list || !prop || !key) return new Error('you should send all prams to make function work');\r\n    let newList = [...list]\r\n    return newList.filter(item => item[prop].includes(key));\r\n}\r\n\r\n// helps function filter by prop name matches and  return new array\r\nexport const filterMatchByProps = (list, prop, key) => {\r\n\r\n    if (!list || !prop || !key) return new Error('you should send all prams to make function work');\r\n    let newList = [...list]\r\n    return newList.filter(item => item[prop] === key);\r\n}\r\n\r\n\r\n// helps function filter by date range  and  return new array\r\nexport const filterByDateRange = (list, start, end) => {\r\n    if (list && start && end) {\r\n        let newList = [...list];\r\n        let startDate = new Date(start);\r\n        let endDate = new Date(end);\r\n\r\n        return newList.filter(a => {\r\n            let date = new Date(a.handoffDate);\r\n            return (date >= startDate && date <= endDate);\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\n// helps function Generate list of objects \r\nexport const GenerateDropDownList = (number, name, object = {}) => {\r\n    let newList = []\r\n    for (let i = 0; i < number; i++) {\r\n        newList.push({ ...object, number: i + 1, name: name + ' ' + (i + 1) })\r\n    }\r\n    return newList\r\n}\r\n\r\nconst generateHorizontalList = (totalPositionsCount) => {\r\n    let rowNum = Math.sqrt(totalPositionsCount)\r\n    var horizontalList = [];\r\n    let number = 0;\r\n    let counter = 0\r\n    for (let i = 0; i < rowNum; i++) {\r\n        number = i + 1\r\n        let row = 0\r\n        for (let y = 0; y < rowNum; y++) {\r\n            counter += 1\r\n            row = number + (y * rowNum);\r\n            horizontalList.push({ [counter]: row });\r\n        }\r\n    }\r\n\r\n    return horizontalList\r\n}\r\n\r\n// helps function sort list of random numbers in horizontal way base on row length \r\nexport const sortListHorizontal = (positions, totalPositionsCount) => {\r\n    let horizontalList = generateHorizontalList(totalPositionsCount)\r\n    var sortPositionsHorizontal = [];\r\n\r\n    for (let i = 0; i < horizontalList.length; i++) {\r\n        if (positions.includes(horizontalList[i][i + 1].toString())) {\r\n            sortPositionsHorizontal.push(horizontalList[i][i + 1])\r\n        }\r\n    }\r\n    return sortPositionsHorizontal\r\n}\r\n\r\n// helps function sort list of random numbers in vertical way \r\nexport const sortListVertical = (positions) => {\r\n    return positions.sort((a, b) => a - b);\r\n}\r\n\r\n\r\n// helps function filter by prop name  and  return new array\r\nexport const replaceObjInListByProps = (list, objList, prop) => {\r\n\r\n    if (!list || !prop || !objList) return new Error('you should send all prams to make function work');\r\n    let newList = [...list];\r\n    objList.map(obj => {\r\n        const indexOfItemInArray = newList.findIndex(q => q[prop] === obj[prop]);\r\n        if (indexOfItemInArray > -1) {\r\n            newList[indexOfItemInArray] = obj;\r\n        }\r\n    })\r\n    return newList;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"mainPrimary\":\"#009dba\",\"WellStatus\":\"WellsStatus_WellStatus__TeLs9\",\"Unplaced\":\"WellsStatus_Unplaced__a59fX\",\"Placed\":\"WellsStatus_Placed__zqsE4\"};","import React, { memo } from \"react\";\r\nimport classes from \"./WellsStatus.module.scss\";\r\n\r\n\r\n//single well component \r\nconst WellsStats = ({ unplaced, placed }) => {\r\n\r\n\r\n  return <div className={classes.WellStatus}>\r\n\r\n    <div>\r\n      <p className={classes.Unplaced}><span></span> Unplaced ({unplaced})</p>\r\n      <p className={classes.Placed}><span></span> Placed ({placed})</p>\r\n    </div>\r\n\r\n  </div>\r\n}\r\n\r\n\r\nexport default memo(WellsStats);\r\n\r\n","import React, { forwardRef, memo, useImperativeHandle, useMemo, useRef, useState } from \"react\";\r\nimport classes from \"./Wells.module.scss\";\r\nimport Selecto from \"react-selecto\";\r\nimport { Tooltip } from \"@mui/material\";\r\nimport { findObjFromArrayByProp, handelDateFormatter } from \"../../constants/helps\";\r\nimport { EMPTY_STATE } from \"../../constants/messages\";\r\nimport WellsStatus from \"./WellsStatus/WellsStatus\";\r\n\r\n\r\n//single well component \r\nexport const Well = ({ well }) => {\r\n  let title = <>\r\n    <p className={classes.TooltipText}>\r\n      {`Material : ${well.materialName}`} <br />\r\n      {`Strain : ${well.materialStrainName}`} <br />\r\n      {`Hand-Off Date : ${handelDateFormatter(well.handoffDate)}`}</p>\r\n  </>\r\n\r\n  return (\r\n    well.locationId ? (<Tooltip title={title} placement=\"top\" className={classes.Tooltip} >\r\n      <div className={classes.Well + ' ' + classes.activeWell}>{well.number}</div>\r\n    </Tooltip >) : (\r\n      <div className={classes.Well + ' cube'}>{well.number}</div>\r\n    ))\r\n}\r\n\r\n\r\n\r\n//single well Row component \r\nexport const WellRow = ({ row }) => {\r\n  return <div className={classes.WellRow}>{row.map((well, index) => <Well well={well} key={row[index].number} number={well.number} />)}</div>\r\n}\r\n\r\n\r\nconst createCells = (obj, number, activeWells) => {\r\n  let rowLength = Math.sqrt(number);\r\n  let newCellsList = [];\r\n  let wellStatus = { placed: 0, unplaced: 0 }\r\n  for (let i = 0; i < rowLength; i++) {\r\n    newCellsList.push({ row: [], number: i })\r\n    for (let y = 0; y < rowLength; y++) {\r\n      let wellNum = (i * rowLength) + (y + 1);\r\n      if (findObjFromArrayByProp(activeWells, 'well', wellNum.toString())) {\r\n        newCellsList[i].row.push({ ...obj, number: wellNum, ...findObjFromArrayByProp(activeWells, 'well', wellNum.toString()) });\r\n        wellStatus.placed++\r\n      } else {\r\n        newCellsList[i].row.push({ ...obj, number: wellNum })\r\n        wellStatus.unplaced++\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  return [newCellsList, wellStatus]\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst Wells = forwardRef(({ selectedCellsFun, numOfWells, activeWells, wellStatusFun }, ref) => {\r\n  const bodyRef = useRef(null);\r\n  let [myWellRow, wellStatus] = createCells({ number: 0 }, numOfWells, activeWells);\r\n\r\n // get refrance for this component to call functions from outside\r\n useImperativeHandle(ref, () => ({\r\n  resetWells: resetSelectedWells,\r\n}));\r\n  const resetSelectedWells = async () => {\r\n    let allWells = await document.getElementsByClassName(classes.Well);\r\n    [...allWells].map(el => {\r\n      el.classList.remove(\"selected\");\r\n    })\r\n    selectedCellsFun([])\r\n  }\r\n\r\n  useMemo(() => {\r\n    wellStatusFun(wellStatus)\r\n    resetSelectedWells()\r\n  }, [wellStatus.unplaced])\r\n\r\n  return (\r\n    <>\r\n      <Selecto\r\n        dragContainer={\".elements\"}\r\n        selectableTargets={[\".selecto-area .cube\"]}\r\n        hitRate={100}\r\n        selectByClick={true}\r\n        selectFromInside={true}\r\n        toggleContinueSelect={[\"shift\"]}\r\n        ratio={0}\r\n        onSelect={e => {\r\n          e.added.forEach(el => {\r\n            el.classList.add(\"selected\");\r\n            selectedCellsFun(e.selected);\r\n          });\r\n          e.removed.forEach(el => {\r\n            el.classList.remove(\"selected\");\r\n            selectedCellsFun(e.selected)\r\n          });\r\n        }}\r\n      ></Selecto>\r\n      <div className={classes.PageWrapper + ' elements selecto-area'} id=\"selecto1\">\r\n        {myWellRow.length ? (<div className={classes.WellRow} ref={bodyRef}>\r\n          {myWellRow.map(({ row }, index) => <WellRow row={row} key={index} />)}\r\n        </div>) : (<p className={classes.EmptyState}>{EMPTY_STATE.WELLS}</p>)}\r\n      </div>\r\n      <WellsStatus unplaced={wellStatus.unplaced} placed={wellStatus.placed} />\r\n    </>\r\n  )\r\n});\r\n\r\nexport default memo(Wells);\r\n","import axios from \"axios\";\r\nimport { STRAIN_API, STRAIN_LOCATION_API } from \"./apiURLs\";\r\n\r\n/**\r\n * list existing Strain\r\n */\r\nexport function getStrainList(materialTypeId, transGroupId) {\r\n  return axios.get(`${STRAIN_API.BASE_URL}?materialtypeId=${materialTypeId}&transgroupId=${transGroupId}`);\r\n\r\n}\r\n\r\n/**\r\n * get Strain location\r\n */\r\nexport function getStrainLocation(transFreezerId, rack, box) {\r\n  return axios.get(`${STRAIN_LOCATION_API.BASE_URL}?transFreezerId=${transFreezerId}&rack=${rack}&box=${box}`);\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"mainPrimary\":\"#009dba\",\"basicClass\":\"SelectInputChange_basicClass__N0xj4\"};","import React, { forwardRef, useEffect, useImperativeHandle, useState } from \"react\";\r\nimport { Autocomplete, Paper, TextField } from \"@mui/material\";\r\nimport classes from \"./SelectInputChange.module.scss\";\r\n\r\nconst SelectInputChange = forwardRef(({ options, value = null, optionsWidth = \"100%\", presentsProps = 'name', propsType = \"name\", label = null, disabled = false, placeholder, onChange, ...rest }, ref) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [localValue, setLocalValue] = useState(value);\r\n\r\n\r\n  useEffect(() => setLocalValue(value), [value]);\r\n  const onChangeHandler = (_, e) => {\r\n    onChange(_, e)\r\n    setLocalValue(e)\r\n  }\r\n\r\n  // get refrance for this component to call functions from outside\r\n  useImperativeHandle(ref, () => ({\r\n    clearSelect: clearSelectInput,\r\n  }));\r\n\r\n\r\n  const clearSelectInput = () => {\r\n    setInputValue('')\r\n  }\r\n\r\n  return <div className={classes.basicClass}>\r\n    {options &&\r\n      <Autocomplete\r\n        disabled={disabled || !options.length}\r\n        inputValue={inputValue}\r\n        value={localValue ?? null}\r\n        onInputChange={(_, newInputValue) => { setInputValue(newInputValue) }}\r\n        onChange={(_, e) => onChangeHandler(_, e)}\r\n        options={options.map(option => propsType === \"name\" ? option[presentsProps] : option)}\r\n        renderInput={(params) => <TextField   {...params} placeholder={placeholder} label={label} />}\r\n        PaperComponent={(props) => <Paper {...props} sx={{ width: optionsWidth }} />}\r\n        getOptionLabel={(option) => propsType === \"name\" ? option : option[presentsProps]}\r\n        {...rest}\r\n      />}\r\n\r\n  </div>;\r\n});\r\nexport default React.memo(SelectInputChange);\r\n","import { useSelector } from \"react-redux\";\r\n\r\n//Check if user have allowed roles return children passed otherwise return default component if specified\r\nconst AuthorizationWrapper = ({ children, allowedRoles ,defaultComponent=null }) => {\r\n  const roles = useSelector((state) => state.user.roles);\r\n  if ( roles && (roles.some(item => allowedRoles.includes(item)))) return children;\r\n  else return defaultComponent ;\r\n};\r\n\r\n\r\nexport default  AuthorizationWrapper;\r\n","import React, { memo, useCallback, useEffect, useRef, useState } from \"react\";\r\nimport { Breadcrumbs, Container } from \"@mui/material\";\r\nimport CustomButton, { CLASS_TYPES } from \"../common/Button/Button\";\r\nimport { BUTTONS, DROPDOWN } from \"../../constants/messages\";\r\nimport RowContainer from \"../common/RowContainer/RowContainer\";\r\nimport classes from \"./DeviceName.module.scss\";\r\nimport RockCell from \"../renderCells/RockCell/RockCell\";\r\nimport Wells from \"../Wells/Wells\";\r\nimport { connect } from \"react-redux\";\r\nimport { GenerateDropDownList } from \"../../constants/helps\";\r\nimport { getStrainLocation } from \"../../api/strainApi\";\r\nimport SelectInputChange from \"../SelectInputChange/SelectInputChange\";\r\nimport AuthorizationWrapper from \"../authorization/AuthorizationWrapper\";\r\nimport { EDIT_ROLES } from \"../../config/securityConfig\";\r\n\r\n\r\nconst DeviceName = ({ wellsInfoFn, deviceConfigRedux, wellsRedux }) => {\r\n  const [racks, setRacks] = useState([]);\r\n  const [defaultRack, setDefaultRack] = useState();\r\n  const [selectedRack, setSelectedRack] = useState(null);\r\n\r\n  const [boxes, setBoxes] = useState([]);\r\n  const [defaultBox, setDefaultBox] = useState();\r\n  const [selectedBox, setSelectedBox] = useState(null);\r\n\r\n  const [wellsActiveLocation, setWellsActiveLocation] = useState([]);\r\n  const [wellStatus, setWellStatus] = useState({});\r\n\r\n  const rackInputRef = useRef();\r\n  const boxInputRef = useRef();\r\n  const wellsRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (wellsRedux?.length) {\r\n      setWellsActiveLocation(prev => [...prev, ...wellsRedux])\r\n    }\r\n  }, [wellsRedux])\r\n\r\n  const getStrainLocationFun = async (deviceConfigId, rack, box) => {\r\n    const locations = await getStrainLocation(deviceConfigId, rack, box);\r\n    setWellsActiveLocation(locations);\r\n    wellsRef.current.resetWells();\r\n  }\r\n\r\n  // call API when rack dropdown change value \r\n  const selectRack = async (_, rack) => {\r\n    setSelectedRack(rack?.number)\r\n    if (!deviceConfigRedux || !rack || selectedBox === null) return\r\n    getStrainLocationFun(deviceConfigRedux.id, rack.number, selectedBox)\r\n  };\r\n\r\n  // call API when box dropdown change value \r\n  const selectBox = async (_, box) => {\r\n    setSelectedBox(box?.number)\r\n    if (!deviceConfigRedux || !box || selectedBox === null) return\r\n    getStrainLocationFun(deviceConfigRedux.id, selectedRack, box.number)\r\n  };\r\n\r\n\r\n  const onClick = () => { };\r\n\r\n  const generateAllLists = async () => {\r\n    // generate dynamic list for box & racks dropdowns depend on api response\r\n    let rackList = await GenerateDropDownList(deviceConfigRedux.numOfRacks, 'Rack', {});\r\n    let boxesList = await GenerateDropDownList(deviceConfigRedux.numOfBoxes, 'Box', {});\r\n\r\n    // extract default value depend on api response and set it in local state\r\n    let defaultRack = await rackList[+deviceConfigRedux?.defaultRack - 1];\r\n    let defaultBox = await boxesList[+deviceConfigRedux?.defaultBox - 1];\r\n    await setDefaultRack(defaultRack);\r\n    await setDefaultBox(defaultBox);\r\n\r\n    // set selected box & racks in local statue to use in in dropdown change \r\n    await setSelectedBox(defaultBox?.number);\r\n    await setSelectedRack(defaultRack?.number);\r\n\r\n    // call API to get well active location \r\n    await getStrainLocationFun(deviceConfigRedux.id, defaultRack.number, defaultBox.number)\r\n    await setRacks(rackList);\r\n    await setBoxes(boxesList)\r\n\r\n  }\r\n\r\n\r\n\r\n  const selectedCellsHandler = (wells) => {\r\n    let wellsInfo = {\r\n      transFreezerFK: deviceConfigRedux?.id,\r\n      numOfWells: deviceConfigRedux?.numOfWells,\r\n      wells: wells,\r\n      rack: selectedRack,\r\n      box: selectedBox,\r\n    }\r\n    wellsInfoFn(wellsInfo)\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    if (!deviceConfigRedux) return\r\n    generateAllLists();\r\n  }, [deviceConfigRedux])\r\n\r\n  const wellStatusHandler = useCallback((status) => {\r\n    setTimeout(() => setWellStatus(status), 0)\r\n  }, [setWellStatus])\r\n\r\n  const renderOption = (props, option) => {\r\n    return <li {...props}><RockCell key={option.id} option={option} /></li>\r\n  }\r\n\r\n  // useEffect(()=>{setRacks(racks)})\r\n  return <div className={classes.compWrapper}>\r\n    <RowContainer >\r\n      <Container maxWidth=\"100%\">\r\n        <Breadcrumbs >\r\n          <p className={classes.DeviceName}>{deviceConfigRedux?.name ?? \"Device name\"}</p>\r\n\r\n          <SelectInputChange className={classes.RackDropDown} optionsWidth=\"200px\" ref={rackInputRef}\r\n            disableClearable renderOption={renderOption} value={defaultRack}\r\n            placeholder={DROPDOWN.SELECT_RACK}\r\n            propsType=\"object\" options={racks} onChange={selectRack} />\r\n\r\n          <SelectInputChange className={classes.RackDropDown} optionsWidth=\"200px\" ref={boxInputRef}\r\n            placeholder={DROPDOWN.SELECT_BOX} disableClearable renderOption={renderOption} value={defaultBox}\r\n            options={boxes} propsType=\"object\" onChange={selectBox} />\r\n\r\n        </Breadcrumbs>\r\n      </Container>\r\n    </RowContainer>\r\n    <RowContainer >\r\n      <Container maxWidth=\"100%\" className={classes.AddressWrapper}>\r\n        <p className={classes.BoxPosition}>{selectedBox ? ('Box ' + selectedBox) : DROPDOWN.SELECT_BOX}\r\n          <span>{wellStatus?.unplaced + ' unplaced '}</span></p>\r\n        <AuthorizationWrapper allowedRoles={EDIT_ROLES}>\r\n          <div className={classes.ActionWrapper}>\r\n            <CustomButton className={classes.BoxButtons}\r\n              onClick={onClick}\r\n              label={BUTTONS.UNPLACE}\r\n              classType={CLASS_TYPES.ACTION_SECONDARY_FORM_BTN}\r\n            />\r\n\r\n            <CustomButton\r\n              onClick={onClick}\r\n              label={BUTTONS.UNPLACE_EXPIRECONTENT}\r\n              classType={CLASS_TYPES.ACTION_SECONDARY_FORM_BTN}\r\n              className={classes.BoxButtons}\r\n\r\n            />\r\n          </div>\r\n        </AuthorizationWrapper>\r\n      </Container>\r\n    </RowContainer>\r\n    <Container maxWidth=\"100%\" >\r\n      <Wells ref={wellsRef} selectedCellsFun={selectedCellsHandler} activeWells={wellsActiveLocation} wellStatusFun={wellStatusHandler} numOfWells={deviceConfigRedux?.numOfWells || 0} />\r\n    </Container>\r\n  </div>;\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    deviceConfigRedux: state.deviceConfig.deviceConfig,\r\n    wellsRedux: state.materials.wells,\r\n  };\r\n};\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, null)(memo(DeviceName));\r\n","import * as types from \"./actionTypes\";\r\nimport * as api from \"../../api/materialsApi\";\r\n\r\n/**\r\n * Action to update store with materials list created by system\r\n * @param {*} statuses Materials  lookup\r\n */\r\nexport function setMaterials(materials) {\r\n  materials.map(m => m.selected = false)\r\n  return { type: types.SET_MATERIALS, materials };\r\n}\r\n\r\n\r\nexport function sortMaterials(materials) {\r\n  return { type: types.SORT_MATERIALS, materials };\r\n}\r\n\r\n\r\nexport function setSelectedMaterials(material) {\r\n  return { type: types.SET_SELECTED_MATERIALS, material };\r\n}\r\n\r\nexport function setGroupSelectedMaterials(materials) {\r\n  return { type: types.SET_GROUP_SELECTED_MATERIALS, materials };\r\n}\r\n\r\n\r\nexport function resetSelectedMaterials() {\r\n  return { type: types.RESET_SELECTED_MATERIALS };\r\n}\r\n\r\n\r\nexport function updateCurrentMaterial(material) {\r\n  return { type: types.UPDATE_CURRENT_MATERIAL, material };\r\n}\r\n\r\nexport function setSearchOnMaterials(materials) {\r\n  return { type: types.SEARCH_ON_CURRENT_MATERIALS, materials };\r\n}\r\nexport function updateAllMaterials(materials) {\r\n  return { type: types.UPDATE_ALL_MATERIALS, materials };\r\n}\r\n\r\nexport function updateActiveWells(wells) {\r\n  return { type: types.UPDATE_ACTIVE_WELLS, wells };\r\n}\r\n\r\nexport function setLoadingMaterials(loadingFlag) {\r\n  return { type: types.SET_LOADING_MATERIALS, loadingFlag };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Get Materials for viewing depend on materialType Id and trans Group Id\r\n * @param {*} materialTypeId materialType Id\r\n * @param {*} transGroupId trans Group Id\r\n */\r\n\r\nexport function getMaterials(materialTypeId, transGroupId) {\r\n  return function (dispatch, getState) {\r\n    const { loadingMaterials } = getState();\r\n    // the Materials is already loading\r\n    if (loadingMaterials) {\r\n      return;\r\n    }\r\n    dispatch(setLoadingMaterials(true));\r\n\r\n    return api\r\n      .getMaterialsList(materialTypeId, transGroupId)\r\n      .then(list => {\r\n        //dispatch actions\r\n        dispatch(setMaterials(list));\r\n        dispatch(sortMaterials(list));\r\n        dispatch(resetSelectedMaterials());\r\n        dispatch(setLoadingMaterials(false));\r\n      })\r\n      .catch(error => {\r\n        // eslint-disable-next-line no-console\r\n        dispatch(setLoadingMaterials(false));\r\n        console.log(\"Error occurred while fetching the Materials list\");\r\n        throw error;\r\n      });\r\n  };\r\n}\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"mainPrimary\":\"#009dba\",\"CustomTabsWrapper\":\"CustomTabs_CustomTabsWrapper__nk5r8\"};","import React, { forwardRef, useEffect, useImperativeHandle, useState } from \"react\";\r\nimport { Tab, Tabs } from \"@mui/material\";\r\nimport PropTypes from \"prop-types\";\r\nimport classes from \"./CustomTabs.module.scss\";\r\n\r\nconst CustomTabs = forwardRef(({ tabList = [], selectHandler }, ref) => {\r\n  const [value, setValue] = useState(tabList[0].key);\r\n\r\n  //useEffect(() => { setValue(tabList[0].key) }, [tabList])\r\n  const handleChange = (_e, newValue) => {\r\n    setValue(newValue);\r\n    selectHandler(newValue)\r\n  };\r\n  const resetTabsHandler = () => setValue(tabList[0].key)\r\n\r\n\r\n  // get refrance for this component to call functions from outside\r\n  useImperativeHandle(ref, () => ({\r\n    resetTabs: resetTabsHandler\r\n  }));\r\n  return (\r\n    <div className={classes.CustomTabsWrapper}>\r\n\r\n      <Tabs value={value} onChange={handleChange} >\r\n        {tabList.map((tab, i) => <Tab key={i} value={tab.key} label={`${tab.label} (${tab.count}) `} />)}\r\n      </Tabs>\r\n    </div>\r\n  );\r\n});\r\nexport default React.memo(CustomTabs);\r\n\r\nCustomTabs.propTypes = {\r\n  tabList: PropTypes.array.isRequired,    // list of tabs should be exist\r\n  selectHandler: PropTypes.func,             // function call from this comp to return selected tab\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"mainPrimary\":\"#009dba\",\"boxWrapper\":\"SearchBar_boxWrapper__Q7FJf\",\"inputBlock\":\"SearchBar_inputBlock__hJ9Bv\",\"searchICON\":\"SearchBar_searchICON__K0PYu\",\"clearBtn\":\"SearchBar_clearBtn__qytTA\",\"errorMessage\":\"SearchBar_errorMessage__KMLb1\"};","import React, { useState, memo, forwardRef, useImperativeHandle } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classesStyle from \"./SearchBar.module.scss\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport Button from \"../Button/Button\";\r\nimport { BUTTONS } from \"../../../constants/messages\";\r\n\r\n\r\nconst SearchBar = forwardRef(({ classes, placeholder, onSearchFun, clearInput }, ref) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n\r\n  const onChangeHandler = (e) => {\r\n    let value = e.target.value;\r\n    onSearchFun(value);\r\n    setInputValue(value);\r\n\r\n  }\r\n\r\n  const clearInputHandler = () => {\r\n    setInputValue('')\r\n    onSearchFun('')\r\n  }\r\n\r\n  // get refrance for this component to call functions from outside\r\n  useImperativeHandle(ref, () => ({\r\n    clearInput: clearInputHandler\r\n  }));\r\n\r\n  return (\r\n    <>\r\n      <div className={classesStyle.boxWrapper}>\r\n\r\n        <div className={classesStyle.inputBlock + \" \" + classes}>\r\n          <SearchIcon className={classesStyle.searchICON} />\r\n          <input\r\n            type=\"text\"\r\n            placeholder={placeholder}\r\n            onChange={onChangeHandler}\r\n            value={inputValue}\r\n          />\r\n\r\n          {inputValue && <Button label={BUTTONS.CLEAR}\r\n            className={classesStyle.clearBtn}\r\n            color=\"primary\" disableElevation\r\n            onClick={clearInputHandler} />}\r\n        </div>\r\n        {/* {error && <p className={classesStyle.errorMessage}>{error}</p>} */}\r\n      </div>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default memo(SearchBar);\r\n\r\nSearchBar.propTypes = {\r\n  placeholder: PropTypes.string,  // placeholder of type string \r\n  onSearchFun: PropTypes.func\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"mainPrimary\":\"#009dba\",\"MaterialListWrapper\":\"MaterialList_MaterialListWrapper__z3oBl\",\"EmptyState\":\"MaterialList_EmptyState__xdjEy\",\"Loading\":\"MaterialList_Loading__mVg5c\"};","// extracted by mini-css-extract-plugin\nexport default {\"mainPrimary\":\"#009dba\",\"MaterialRowWrapper\":\"MaterialRow_MaterialRowWrapper__CMOk8\",\"MaterialName\":\"MaterialRow_MaterialName__MStTF\",\"MaterialLocation\":\"MaterialRow_MaterialLocation__Hxabz\",\"DateSide\":\"MaterialRow_DateSide__m06PE\",\"MaterialDate\":\"MaterialRow_MaterialDate__EbVsM\",\"Selected\":\"MaterialRow_Selected__BsVSu\"};","import React, { memo } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport classes from \"./MaterialRow.module.scss\";\r\nimport * as lookupsActions from \"../../../redux/actions/materialsActions\"\r\nimport { handelDateFormatter } from \"../../../constants/helps\";\r\n\r\nconst MaterialRow = ({ material,index, updateCurrentMaterialFn,setSelectedMaterialsFn }) => {\r\n  let M = material\r\n\r\n  const classesValue = `${classes.MaterialRowWrapper} ${M.selected ? classes.Selected : \"\"}`;\r\n\r\n  return (\r\n    <div className={classesValue} onClick={() => {\r\n      updateCurrentMaterialFn({material,index})\r\n      setSelectedMaterialsFn(material)\r\n    }}>\r\n      <div>\r\n        \r\n        <p className={classes.MaterialName}>{M.materialName} {M.expired && <span>Expired {M.expired_date && `on ${M.expired_date}`}</span>}</p>\r\n        {M.locationId ? <p className={classes.MaterialLocation}><span>{M.transFreezerName}  / Rack {M.rack} / Box {M.box} / Well {M.well}</span></p> :\r\n          <p className={classes.MaterialLocation}> Unplaced</p>\r\n        }\r\n      </div>\r\n      <div className={classes.DateSide}>\r\n        <p className={classes.MaterialCell}>{M.materialStrainName}</p>\r\n        <p className={classes.MaterialDate}>{handelDateFormatter(M.handoffDate)}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  updateCurrentMaterialFn: lookupsActions.updateCurrentMaterial,\r\n  setSelectedMaterialsFn:lookupsActions.setSelectedMaterials\r\n\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(memo(MaterialRow));\r\n","import React, { memo } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { EMPTY_STATE, LOADING } from \"../../constants/messages\";\r\nimport classes from \"./MaterialList.module.scss\";\r\nimport MaterialRow from \"./MaterialRow/MaterialRow\";\r\n\r\nconst MaterialList = ({ filteredMaterials, isLoading, progressLoading }) => {\r\n  return (\r\n    <>\r\n      <div className={classes.MaterialListWrapper} >\r\n        {(isLoading || progressLoading) && <div className={classes.Loading}> {LOADING} </div>}\r\n        {filteredMaterials?.length ? (filteredMaterials.map((material, index) => <MaterialRow material={material} key={material.id} index={index} />)) :\r\n          <p className={classes.EmptyState}>{EMPTY_STATE.MATERIALS}</p>}\r\n\r\n      </div>\r\n    </>\r\n  )\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    filteredMaterials: state.materials.filteredMaterials,\r\n    isLoading: state.materials.isLoadingMaterials,\r\n  };\r\n};\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, null)(memo(MaterialList));\r\n","// extracted by mini-css-extract-plugin\nexport default {\"mainPrimary\":\"#009dba\",\"basicClass\":\"SelectInput_basicClass__ZwvtK\"};","import React, { forwardRef, useRef, useCallback, useEffect, useImperativeHandle, useState } from \"react\";\r\nimport { Autocomplete, Paper, TextField } from \"@mui/material\";\r\nimport classes from \"./SelectInput.module.scss\";\r\n\r\nconst SelectInput = forwardRef(({ options, optionsWidth = \"100%\", presentsProps = 'name', propsType = \"name\", value = null, defaultValue = null, label = null, disabled = false, placeholder, onChange, ...rest }, ref) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n\r\n  const onChangeHandler = (_, e) => {\r\n    onChange(_, e)\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    if (typeof defaultValue === \"object\") { onChange('setDefualt', defaultValue) }\r\n  }, [defaultValue]);\r\n\r\n\r\n\r\n\r\n  // get refrance for this component to call functions from outside\r\n  useImperativeHandle(ref, () => ({\r\n    clearSelect: clearSelectInput,\r\n    setValue:(value)=> {\r\n      setTimeout(()=>setInputValue(value) ,1000)\r\n      }\r\n  }));\r\n\r\n\r\n  const clearSelectInput = () => {\r\n    setInputValue('')\r\n    onChange(null, '')\r\n  }\r\n\r\n  return <div className={classes.basicClass}>\r\n    {/* /////////// render Autocomplete with default value /////////// */}\r\n\r\n\r\n    {options && defaultValue &&\r\n      <Autocomplete\r\n        disabled={disabled || !options.length}\r\n        inputValue={inputValue}\r\n        onInputChange={(_, newInputValue) => { setInputValue(newInputValue) }}\r\n        onChange={(_, e) => onChangeHandler(_, e)}\r\n        defaultValue={defaultValue ?? null}\r\n        options={options.map(option => propsType === \"name\" ? option[presentsProps] : option)}\r\n        renderInput={(params) => <TextField    {...params} placeholder={placeholder} label={label} />}\r\n        PaperComponent={(props) => <Paper {...props} sx={{ width: optionsWidth }} />}\r\n        getOptionLabel={(option) => propsType === \"name\" ? option : option[presentsProps]}\r\n        {...rest}\r\n      />}\r\n    {/* /////////// render Autocomplete without default value /////////// */}\r\n    {!defaultValue &&\r\n      <Autocomplete\r\n        disabled={disabled || !options.length}\r\n        inputValue={inputValue}\r\n        onInputChange={(_, newInputValue) => { if (_) setInputValue(newInputValue) }}\r\n        onChange={(_, e) => onChangeHandler(_, e)}\r\n        options={options.map(option => propsType === \"name\" ? option[presentsProps] : option)}\r\n        renderInput={(params) => <TextField   {...params} placeholder={placeholder} label={label} />}\r\n        PaperComponent={(props) => <Paper {...props} sx={{ width: optionsWidth }} />}\r\n        getOptionLabel={(option) => propsType === \"name\" ? option : option[presentsProps]}\r\n        {...rest}\r\n      />}\r\n\r\n  </div>;\r\n});\r\nexport default React.memo(SelectInput);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"mainPrimary\":\"#009dba\",\"compWrapper\":\"DNAMaterials_compWrapper__wgZD3\",\"ShowWrapper\":\"DNAMaterials_ShowWrapper__O+IOD\",\"FilterSide\":\"DNAMaterials_FilterSide__O2yOh\",\"SortSide\":\"DNAMaterials_SortSide__VKoun\",\"StrainDropDown\":\"DNAMaterials_StrainDropDown__koJgi\",\"PeriodDropDown\":\"DNAMaterials_PeriodDropDown__2fkno\",\"sortDropDown\":\"DNAMaterials_sortDropDown__gc-SO\",\"ButtonsWrapper\":\"DNAMaterials_ButtonsWrapper__AAvE4\",\"PlacesButtonsWrapper\":\"DNAMaterials_PlacesButtonsWrapper__9D5c1\",\"PlacesButton\":\"DNAMaterials_PlacesButton__0FCCW\",\"SearchWrapper\":\"DNAMaterials_SearchWrapper__1P00I\",\"Counter\":\"DNAMaterials_Counter__VjMjC\",\"WarningMessage\":\"DNAMaterials_WarningMessage__ekK-Z\"};","import React, { memo, useEffect, useState } from \"react\";\r\nimport { Alert } from \"@mui/material\";\r\nimport Snackbar from '@mui/material/Snackbar';\r\n\r\nimport classes from \"./SnackbarUI.module.scss\";\r\n\r\nconst SnackbarUI = ({ open, alertInfo = { status: 'success', message: '' } }) => {\r\n\r\n  const { vertical, horizontal } = {\r\n    vertical: 'top',\r\n    horizontal: 'center',\r\n  };\r\n\r\n  const [localOpen, setLocalOpen] = useState(false);\r\n\r\n\r\n  useEffect(() => {\r\n    setLocalOpen(true)\r\n    setTimeout(() => {\r\n      setLocalOpen(false)\r\n    }, 3000)\r\n\r\n  }, [alertInfo])\r\n\r\n\r\n  return (\r\n    <Snackbar open={open && localOpen}\r\n      anchorOrigin={{ vertical, horizontal }} autoHideDuration={2000}  >\r\n      <Alert severity={alertInfo.status} sx={{ width: '100%' }}>\r\n        {alertInfo.message}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n}\r\n\r\nexport default memo(SnackbarUI)","import { Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from \"@mui/material\";\r\nimport * as React from \"react\";\r\nimport {  CANCEL_BUTTON, CONFIRM_UNEXPIRE_BUTTON } from \"../../../constants/messages\";\r\nimport CustomButton, { CLASS_TYPES } from \"../Button/Button\";\r\nimport classes from \"./ConfirmationDialog.module.scss\";\r\n\r\nexport default function ConfirmationDialog({ title,\r\n  isOpen,\r\n  handleCancelDialog,\r\n  handleConfirmAction }) {\r\n  return (\r\n    <div>\r\n\r\n      <Dialog\r\n        open={isOpen}\r\n        onClose={handleCancelDialog}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">\r\n          {title}\r\n        </DialogTitle>\r\n\r\n        <DialogActions>\r\n          <CustomButton onClick={handleCancelDialog}  classType={CLASS_TYPES.ACTION_SECONDARY_FORM_BTN}\r\n            label={CANCEL_BUTTON} disableElevation />\r\n\r\n          <CustomButton onClick={handleConfirmAction}\r\n            label={CONFIRM_UNEXPIRE_BUTTON} disableElevation />\r\n\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","\r\nimport React, { useCallback, useEffect, useRef, useState, memo, useMemo } from \"react\";\r\nimport { Container } from \"@mui/system\";\r\nimport { DateRangePicker } from \"react-date-range\";\r\nimport { connect } from \"react-redux\";\r\nimport { BUTTONS, DIALOG_MSG, DROPDOWN, ERROR_MESSAGE, LABEL, SEARCH_BOX, SELECT_TABS, SUCCESS_MESSAGE } from \"../../constants/messages\";\r\nimport * as lookupsActions from \"../../redux/actions/materialsActions\"\r\nimport CustomTabs from \"../common/CustomTabs/CustomTabs\";\r\nimport RowContainer from \"../common/RowContainer/RowContainer\";\r\nimport SearchBar from \"../common/SearchBar/SearchBar\";\r\nimport MaterialList from \"../MaterialList/MaterialList\";\r\nimport CustomButton, { CLASS_TYPES } from \"../common/Button/Button\"\r\nimport SelectInput from \"../SelectInput/SelectInput\";\r\nimport classes from \"./DNAMaterials.module.scss\";\r\nimport { Grid, Popover } from \"@mui/material\";\r\nimport { sortMaterials, filterMaterials, getMaterialsCategoriesCount, filterByProps, filterByDateRange, sortListHorizontal, sortListVertical, filterMatchByProps, replaceObjInListByProps } from \"../../constants/helps\";\r\nimport AuthorizationWrapper from \"../authorization/AuthorizationWrapper\";\r\nimport { EDIT_ROLES } from \"../../config/securityConfig\";\r\nimport { placeMaterialsToWells, setUnexpire } from \"../../api/materialsApi\";\r\nimport SnackbarUI from \"../common/SnackbarUI/SnackbarUI\";\r\nimport ConfirmationDialog from \"../common/ConfirmationDialog/ConfirmationDialog\";\r\n\r\n\r\n\r\nconst sortOptions = [\r\n  { id: \"1\", name: \"Construct Number (Highest)\", key: \"descending\" },\r\n  { id: \"2\", name: \"Construct Number (Lowest)\", key: \"ascending\" },\r\n  { id: \"3\", name: \"Hand-Off Date (Newest)\", key: \"nto\" },\r\n  { id: \"3\", name: \"Hand-Off Date (Oldest)\", key: \"otn\" }]\r\nconst initTabList = [\r\n  { label: SELECT_TABS.ALL, key: \"all\", count: 0 },\r\n  { label: SELECT_TABS.PLACED, key: \"placed\", count: 0 },\r\n  { label: SELECT_TABS.UNPLACED, key: \"unplaced\", count: 0 },\r\n  { label: SELECT_TABS.EXPIRED, key: \"expired\", count: 0 }]\r\n\r\n\r\n\r\nconst DNAMaterials = ({\r\n  wellsInfo,\r\n  materialListRedux,\r\n  filteredMateriaRedux,\r\n  groupedMateriaRedux,\r\n  strainList = [],\r\n  setGroupSelectedMaterialsFn,\r\n  setSelectedMaterialsFn,\r\n  sortMaterialsFn,\r\n  updateAllMaterialsFn,\r\n  updateActiveWellsFn,\r\n  setSearchOnMaterialsFn,\r\n  selectedMaterials,\r\n  resetSelectedMaterialsFn,\r\n  selectedType,\r\n  selectedCropType }) => {\r\n\r\n\r\n\r\n\r\n  const [selectedDate, handleDateChange] = useState(DROPDOWN.PERIOD);\r\n  const [tabList, setTabList] = useState(initTabList);\r\n  const [proLoading, setProLoading] = useState(false);\r\n  const [selectedWillPositions, setSelectedWillPositions] = useState([]);\r\n  const [disablePlaceButtons, setDisablePlaceButtons] = useState(false);\r\n\r\n\r\n\r\n\r\n\r\n  const getWellsPositions = (willList) => {\r\n    if (!willList) return;\r\n    let willPositions = []\r\n    willPositions = willList.map(well => well?.innerText);\r\n    setSelectedWillPositions(willPositions)\r\n\r\n  };\r\n  const cellsLength = useMemo(() => { getWellsPositions(wellsInfo?.wells); return (wellsInfo?.wells?.length || 0) }, [wellsInfo?.wells]);\r\n  const materialsLength = useMemo(() => (selectedMaterials.length || 0), [selectedMaterials]);\r\n\r\n\r\n  const searchBarRef = useRef();\r\n  const selectInputRef = useRef();\r\n  const strainInputRef = useRef();\r\n  const tabsRef = useRef();\r\n\r\n\r\n\r\n\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [dateRange, setDateRange] = useState({\r\n    dateRange: {\r\n      startDate: new Date(),\r\n      endDate: new Date(),\r\n      key: 'dateRange'\r\n    }\r\n  });\r\n\r\n  const [openAlert, setOpenAlert] = useState(false);\r\n  const [alertInfo, setAlertInfo] = useState({ status: 'success', message: '' });\r\n  const [openConfirmation, setOpenConfirmation] = useState(false);\r\n\r\n\r\n\r\n\r\n\r\n  const openAlertHandler = (status, message) => {\r\n    setOpenAlert(true)\r\n    setAlertInfo({ status: status, message: message });\r\n  }\r\n\r\n  const updatePlaceButtons = () => {\r\n    if (materialsLength > cellsLength || (cellsLength <= 0 || materialsLength <= 0)) {\r\n      setDisablePlaceButtons(true)\r\n    } else {\r\n      setDisablePlaceButtons(false)\r\n    }\r\n  }\r\n  // this useEffect used to check if selected materials equal wells  \r\n  useEffect(() => {\r\n    updatePlaceButtons()\r\n  }, [materialsLength, cellsLength]);\r\n\r\n\r\n\r\n  const handleClickDateRange = (event) => {\r\n    if (!materialListRedux?.length) return\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleCloseDateRange = () => {\r\n    setAnchorEl(false);\r\n  };\r\n  const open = Boolean(anchorEl);\r\n  const id = open ? 'simple-popover' : undefined;\r\n\r\n\r\n\r\n  // reset all filters use component references\r\n  const resetFilters = () => {\r\n    searchBarRef.current.clearInput();\r\n    selectInputRef.current.clearSelect();\r\n    strainInputRef.current.clearSelect();\r\n    tabsRef.current.resetTabs();\r\n    handleDateChange(DROPDOWN.PERIOD)\r\n  }\r\n  useEffect(() => {\r\n    resetFilters()\r\n  }, [materialListRedux]);\r\n\r\n\r\n\r\n\r\n  const filterByStrain = (_, strain) => {\r\n    if (!materialListRedux || !strain) return;\r\n    setSearchOnMaterialsFn(filterMatchByProps(groupedMateriaRedux, 'materialStrainName', strain.name ?? ''));\r\n    resetSelectedMaterialsFn()\r\n  }\r\n\r\n\r\n  const onSort = (selected) => {\r\n    if (!filteredMateriaRedux || !selected?.key) return;\r\n    setProLoading(true)\r\n    setTimeout(() => {\r\n      sortMaterialsFn(sortMaterials(filteredMateriaRedux, selected?.key));\r\n\r\n      return setProLoading(false)\r\n    }, 0);\r\n\r\n  }\r\n\r\n\r\n\r\n  const onClickBtn = () => { }\r\n\r\n  const handleDateChangeFn = (date) => {\r\n    setDateRange({ ...dateRange, ...date });\r\n    if (!materialListRedux || !date.dateRange) return;\r\n\r\n    let editDate = { start: date.dateRange.startDate, end: date.dateRange.endDate };\r\n\r\n    if (date.dateRange.startDate.getDay() === date.dateRange.endDate.getDay()) {\r\n      editDate.start = new Date('Dec 1, 1990');\r\n      editDate.end = date.dateRange.startDate\r\n    } else {\r\n      handleDateChange(date.dateRange.startDate.toLocaleDateString() + ' - ' + date.dateRange.endDate.toLocaleDateString());\r\n      handleCloseDateRange();\r\n    }\r\n    sortMaterialsFn(filterByDateRange(materialListRedux, editDate.start, editDate.end));\r\n\r\n  }\r\n\r\n\r\n\r\n  // handel how materials filtered by helpers fun pass to it list and prop name ,\r\n  // return new array  \r\n  const filterByTabs = (selectedTab) => {\r\n    if (!materialListRedux || !selectedTab) return;\r\n    setProLoading(true);\r\n    setTimeout(() => {\r\n      sortMaterialsFn(filterMaterials(materialListRedux, selectedTab));\r\n      resetSelectedMaterialsFn();\r\n      selectInputRef.current.clearSelect();\r\n      return setProLoading(false)\r\n    }, 0);\r\n  }\r\n\r\n  // this useEffect used to initialize tabs vales first time || every materials list change \r\n  useEffect(() => {\r\n    if (materialListRedux) setTabList(getMaterialsCategoriesCount(materialListRedux, initTabList));\r\n  }, [materialListRedux]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const selectAllMaterials = () => {\r\n    let newList = [...filteredMateriaRedux]\r\n    newList = newList.map((material) => {\r\n      return { ...material, selected: true }\r\n    })\r\n    sortMaterialsFn(newList)\r\n    setGroupSelectedMaterialsFn(newList)\r\n  }\r\n\r\n\r\n  // handel functionally for unexpire materials \r\n  const unexpiredMaterialsHandler = () => {\r\n    if (selectedMaterials.length !== 1) return openAlertHandler('error', \"you shouldn't choose more than one material \");\r\n    if (!selectedMaterials[0]?.expired) return openAlertHandler('error', \"you should choose expired material \");\r\n    setOpenConfirmation(true)\r\n  }\r\n  const handleConfirmToUnexpireMaterial = () => {\r\n    setUnexpire(selectedMaterials[0]?.id)\r\n      .then((res) => {\r\n        updateAllMaterialsFn(replaceObjInListByProps(materialListRedux, [res], 'id'));\r\n        openAlertHandler('success', SUCCESS_MESSAGE.UNEXPIRE_MATERIAL);\r\n      })\r\n      .catch((error) => {\r\n        openAlertHandler('error', ERROR_MESSAGE.CAN_NOT_UNEXPIRE_MATERIAL)\r\n      })\r\n      .finally(() => {\r\n        setOpenConfirmation(false)\r\n      })\r\n\r\n  }\r\n\r\n\r\n  const handleUnplacingMaterials = () => {\r\n    selectedMaterials.map(m => {\r\n      if (!m?.locationId) return openAlertHandler('error', \"you shouldn't choose unplaced material \");\r\n    });\r\n    //       updateCurrentMaterialFn({material,index})\r\n\r\n    // setSelectedMaterialsFn(filteredMateriaRedux[0])\r\n    console.log(selectedMaterials);\r\n    // setUnexpire(selectedMaterials[0]?.id)\r\n    //   .then((res) => {\r\n    //     updateAllMaterialsFn(replaceObjInListByProps(materialListRedux, [res], 'id'));\r\n    //     openAlertHandler('success', SUCCESS_MESSAGE.UNEXPIRE_MATERIAL);\r\n    //   })\r\n    //   .catch((error) => {\r\n    //     openAlertHandler('error', ERROR_MESSAGE.CAN_NOT_UNEXPIRE_MATERIAL)\r\n    //   })\r\n    //   .finally(() => {\r\n    //     setOpenConfirmation(false)\r\n    //   })\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  // handel search every key stroke in input search throne debounce function \r\n  const onSearchHandler = (searchKey) => {\r\n    if (groupedMateriaRedux && searchKey !== '') {\r\n      setSearchOnMaterialsFn(filterByProps(groupedMateriaRedux, 'constructName', searchKey));\r\n    } else {\r\n      setSearchOnMaterialsFn(groupedMateriaRedux);\r\n    }\r\n    // resetSelectedMaterialsFn()\r\n  }\r\n\r\n  // debounce function use to enhance call function after 500sec  \r\n  const debounce = (func) => {\r\n    let timer;\r\n    return function (...args) {\r\n      const context = this;\r\n      if (timer) clearTimeout(timer);\r\n      timer = setTimeout(() => {\r\n        timer = null;\r\n        func.apply(context, args);\r\n      }, 500);\r\n    };\r\n  };\r\n\r\n  const optimiseOnSearch = useCallback(debounce(onSearchHandler), [materialListRedux, groupedMateriaRedux])\r\n\r\n\r\n\r\n  const placeMaterials = (crossType) => {\r\n    let sortPositions;\r\n    let validData = true\r\n    crossType === 'across' ? (sortPositions = sortListVertical(selectedWillPositions)) : (sortPositions = sortListHorizontal(selectedWillPositions, wellsInfo.numOfWells))\r\n    let selectedMaterialsList = selectedMaterials.map((m, i) => {\r\n      if (m?.locationId || m?.expired) {\r\n        openAlertHandler('error', ERROR_MESSAGE.CAN_NOT_PLACE_MATERIAL)\r\n        return validData = false;\r\n      }\r\n      let setMaterialsBody = {\r\n        transFreezerFK: wellsInfo.transFreezerFK,\r\n        rack: wellsInfo.rack,\r\n        box: wellsInfo.box,\r\n        wellPos: sortPositions[i],\r\n        agroGlycerol: m.id\r\n      }\r\n      return setMaterialsBody\r\n    })\r\n    if (!validData) return;\r\n    setDisablePlaceButtons(true);\r\n    placeMaterialsToWells(selectedMaterialsList)\r\n      .then((res) => {\r\n        updateAllMaterialsFn(replaceObjInListByProps(materialListRedux, res, 'id'));\r\n        updateActiveWellsFn(res);\r\n        openAlertHandler('success', SUCCESS_MESSAGE.PLACE_MATERIAL)\r\n      })\r\n      .catch((error) => {\r\n        openAlertHandler('error', ERROR_MESSAGE.CAN_NOT_PLACE_MATERIAL)\r\n\r\n      })\r\n      .finally(() => {\r\n        setTimeout(() => setOpenAlert(false), 5000);\r\n      })\r\n    setDisablePlaceButtons(false);\r\n  }\r\n\r\n\r\n\r\n\r\n  return <div className={classes.compWrapper}>\r\n    <RowContainer >\r\n      <Container maxWidth=\"100%\" className={classes.SearchWrapper}>\r\n        <SearchBar ref={searchBarRef} placeholder={SEARCH_BOX.PLACEHOLDER + (selectedType?.name ?? '') + ' Material'} onSearchFun={(e) => optimiseOnSearch(e)} />\r\n        <CustomButton\r\n          onClick={() => {\r\n            updateAllMaterialsFn(materialListRedux);\r\n            if (filteredMateriaRedux) setTabList(getMaterialsCategoriesCount(filteredMateriaRedux, initTabList))\r\n            resetFilters()\r\n          }}\r\n          label={BUTTONS.CLEAR_FILTERS}\r\n          disableElevation\r\n        />\r\n      </Container>\r\n    </RowContainer>\r\n\r\n    <RowContainer className={classes.ShowWrapper}>\r\n      <AuthorizationWrapper allowedRoles={EDIT_ROLES}>\r\n        <Container maxWidth=\"100%\" >\r\n          <p>{LABEL.SHOW}</p>\r\n          <CustomTabs tabList={tabList} selectHandler={filterByTabs} ref={tabsRef} />\r\n        </Container>\r\n      </AuthorizationWrapper>\r\n    </RowContainer>\r\n\r\n    <RowContainer className={classes.ShowWrapper}>\r\n      <Container maxWidth=\"100%\" >\r\n        <AuthorizationWrapper allowedRoles={EDIT_ROLES}>\r\n          <div className={classes.FilterSide}>\r\n            <p>{LABEL.FILTER}</p>\r\n            <SelectInput className={classes.StrainDropDown} ref={strainInputRef}\r\n              disableClearable propsType=\"object\" disabled={!materialListRedux?.length}\r\n              options={strainList} placeholder={DROPDOWN.STRAIN} onChange={filterByStrain} />\r\n\r\n            <CustomButton className={classes.PeriodDropDown} aria-describedby={id}\r\n              variant=\"contained\" onClick={handleClickDateRange} disableElevation\r\n              label={selectedDate} />\r\n            <Popover\r\n              id={id}\r\n              open={open}\r\n              anchorEl={anchorEl}\r\n              onClose={handleCloseDateRange}\r\n\r\n              anchorOrigin={{\r\n                vertical: 'bottom',\r\n                horizontal: 'left',\r\n              }}\r\n            >\r\n              <DateRangePicker\r\n                onChange={(date) => handleDateChangeFn(date)}\r\n                months={2}\r\n                color='#ffeb3b'\r\n                maxDate={new Date()}\r\n                ranges={[dateRange.dateRange]}\r\n                direction=\"horizontal\"\r\n                staticRanges={[]}\r\n                inputRanges={[]}\r\n              />;\r\n            </Popover>\r\n\r\n\r\n          </div>\r\n        </AuthorizationWrapper>\r\n        <div className={classes.SortSide}>\r\n          <p>{LABEL.SORT}</p>\r\n          <SelectInput className={classes.sortDropDown} optionsWidth=\"235px\" ref={selectInputRef}\r\n            disableClearable propsType=\"object\" disabled={!filteredMateriaRedux?.length}\r\n            options={sortOptions} placeholder={DROPDOWN.SORT_CRITERIA} onChange={(_, selected) => onSort(selected)} />\r\n\r\n\r\n        </div>\r\n      </Container>\r\n    </RowContainer>\r\n\r\n    <Container maxWidth=\"100%\" >\r\n      <AuthorizationWrapper allowedRoles={EDIT_ROLES}>\r\n        <div className={classes.ButtonsWrapper}>\r\n          <CustomButton\r\n            onClick={() => selectAllMaterials()}\r\n            label={BUTTONS.SELECT_ALL}\r\n            classType={CLASS_TYPES.ACTION_SECONDARY_FORM_BTN}\r\n          />\r\n          <CustomButton\r\n            onClick={handleUnplacingMaterials}\r\n            label={BUTTONS.UNPLACE}\r\n            classType={CLASS_TYPES.ACTION_SECONDARY_FORM_BTN}\r\n            disabled={!selectedMaterials.length}\r\n\r\n          />\r\n          <CustomButton\r\n            //  onClick={() => selectMaterialsByTypeHandler(BUTTONS.EXPIRE)}\r\n            label={BUTTONS.EXPIRE}\r\n            classType={CLASS_TYPES.ACTION_SECONDARY_FORM_BTN}\r\n            disabled={!selectedMaterials.length}\r\n\r\n          />\r\n          <CustomButton\r\n            onClick={unexpiredMaterialsHandler}\r\n            label={BUTTONS.UNEXPIRE}\r\n            classType={CLASS_TYPES.ACTION_SECONDARY_FORM_BTN}\r\n            disabled={selectedMaterials.length !== 1}\r\n\r\n          />\r\n        </div>\r\n      </AuthorizationWrapper>\r\n\r\n      <Grid container>\r\n        <Grid item xs={9}>\r\n          <MaterialList progressLoading={proLoading} />\r\n        </Grid>\r\n        <Grid item xs={3}  >\r\n          <AuthorizationWrapper allowedRoles={EDIT_ROLES}>\r\n            <div className={classes.PlacesButtonsWrapper}>\r\n              <CustomButton\r\n                onClick={() => placeMaterials('across')}\r\n                label={BUTTONS.PLACE_ACROSS}\r\n                className={classes.PlacesButton}\r\n                disableElevation\r\n                disabled={disablePlaceButtons}\r\n              />\r\n\r\n              <CustomButton\r\n                onClick={() => placeMaterials('down')}\r\n                label={BUTTONS.PLACE_DOWN}\r\n                className={classes.PlacesButton}\r\n                disableElevation\r\n                disabled={disablePlaceButtons}\r\n\r\n              />\r\n            </div>\r\n          </AuthorizationWrapper>\r\n          <p className={classes.Counter}><span>{materialsLength}</span>materials selected</p>\r\n          <p className={classes.Counter}><span>{cellsLength}</span>well selected</p>\r\n          {(disablePlaceButtons && materialsLength > 0) && <p className={classes.WarningMessage}>{ERROR_MESSAGE.MATERIALS_MORE_WELLS}</p>}\r\n\r\n\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <SnackbarUI open={openAlert} alertInfo={alertInfo}></SnackbarUI>\r\n      <ConfirmationDialog\r\n        title={DIALOG_MSG.UNEXPIRE}\r\n        handleCancelDialog={() => setOpenConfirmation(false)}\r\n        isOpen={openConfirmation}\r\n        handleConfirmAction={handleConfirmToUnexpireMaterial}\r\n      />\r\n    </Container>\r\n\r\n\r\n  </div>;\r\n};\r\nconst mapStateToProps = state => {\r\n  return {\r\n    materialListRedux: state.materials.materials,\r\n    strainList: state.strains.strains,\r\n    filteredMateriaRedux: state.materials.filteredMaterials,\r\n    groupedMateriaRedux: state.materials.groupedMaterials,\r\n\r\n    selectedMaterials: state.materials.selectedMaterials\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  setSearchOnMaterialsFn: lookupsActions.setSearchOnMaterials,\r\n  updateAllMaterialsFn: lookupsActions.updateAllMaterials,\r\n  updateActiveWellsFn: lookupsActions.updateActiveWells,\r\n  sortMaterialsFn: lookupsActions.sortMaterials,\r\n  resetSelectedMaterialsFn: lookupsActions.resetSelectedMaterials,\r\n  updateCurrentMaterialFn: lookupsActions.updateCurrentMaterial,\r\n  setGroupSelectedMaterialsFn: lookupsActions.setGroupSelectedMaterials,\r\n  setSelectedMaterialsFn: lookupsActions.setSelectedMaterials,\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(memo(DNAMaterials));\r\n","import axios from \"axios\";\r\nimport { MATERIALS_API, MATERIALS_TYPES_API, PLACE_MATERIALS, UNEXPIRE_MATERIALS } from \"./apiURLs\";\r\n\r\n/**\r\n * list existing materials\r\n */\r\nexport function getMaterialsList(materialTypeId, transGroupId) {\r\n  return axios.get(`${MATERIALS_API.BASE_URL}?materialtypeId=${materialTypeId}&transgroupId=${transGroupId}`);\r\n}\r\n\r\n\r\n/**\r\n * list existing materials Types\r\n */\r\nexport function getMaterialsTypesList() {\r\n  return axios.get(MATERIALS_TYPES_API.BASE_URL);\r\n}\r\n\r\n/**\r\n * list existing materials Types\r\n */\r\nexport function placeMaterialsToWells(list) {\r\n  return axios.post(PLACE_MATERIALS.BASE_URL, list );\r\n}\r\n\r\n/**\r\n * list existing materials Types\r\n */\r\n export function setUnexpire(materialTypeId) {\r\n  return axios.put(`${UNEXPIRE_MATERIALS.BASE_URL}?materialId=${materialTypeId}` );\r\n}\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"mainPrimary\":\"#009dba\",\"TopBarWrapper\":\"TopBar_TopBarWrapper__HNgYB\",\"DropDownWrapper\":\"TopBar_DropDownWrapper__g19jG\",\"DropDownStyle\":\"TopBar_DropDownStyle__r4wMN\"};","// extracted by mini-css-extract-plugin\nexport default {\"mainPrimary\":\"#009dba\",\"CellWrapper\":\"MaterialCell_CellWrapper__B8xT4\"};","import React from \"react\";\r\nimport classes from \"./MaterialCell.module.scss\";\r\n\r\nconst MaterialCell = ({ option, ...res }) => {\r\n  return (\r\n    <div className={classes.CellWrapper}  {...res}>\r\n      <div>{option.name}</div>  \r\n       {/* <span>{option.unplaced} unplaced</span> */}\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default MaterialCell;\r\n","import React, { useEffect, useState, memo } from \"react\";\r\nimport { Container } from \"@mui/material\";\r\nimport { BUTTONS, DROPDOWN } from \"../../constants/messages\";\r\nimport { connect } from \"react-redux\";\r\nimport * as lookupsActions from \"../../redux/actions/materialsActions\";\r\nimport * as strainActions from \"../../redux/actions/strainActions\";\r\nimport * as deviceConfigActions from \"../../redux/actions/deviceConfigActions\";\r\n\r\n\r\n\r\nimport CustomButton, { CLASS_TYPES } from \"../common/Button/Button\";\r\nimport RedoIcon from \"@mui/icons-material/Redo\";\r\nimport UndoIcon from \"@mui/icons-material/Undo\";\r\nimport SelectInput from \"../SelectInput/SelectInput\";\r\nimport AuthorizationWrapper from \"../authorization/AuthorizationWrapper\"\r\n\r\nimport classes from \"./TopBar.module.scss\";\r\nimport MaterialCell from \"../renderCells/MaterialCell/MaterialCell\";\r\nimport { EDIT_ROLES } from \"../../config/securityConfig\";\r\nimport { getMaterialsTypesList } from \"../../api/materialsApi\";\r\nimport { getCropsList } from \"../../api/cropsApi\";\r\n\r\nconst TopBar = ({  getMaterialsListRedux, getDeviceConfigRedux, getStrainListRedux }) => {\r\n\r\n  const [materialTypes, setMaterialTypes] = useState([]);\r\n  const [selectedMaterialType, setSelectedMaterialType] = useState();\r\n\r\n  const [crops, setCropsList] = useState([]);\r\n  const [selectedCrop, setSelectedCrop] = useState();\r\n\r\n\r\n\r\n  const onClose = () => { };\r\n\r\n  const renderOption = (props, option) => {\r\n    return <li {...props}><MaterialCell key={option.id} option={option} /></li>\r\n  }\r\n\r\n\r\n\r\n  const selectCropHandler = (_, crop) => {\r\n    setSelectedCrop(crop);\r\n    if (crop && selectedMaterialType) { getMaterials(selectedMaterialType, crop.id) };\r\n\r\n  }\r\n\r\n  const selectMaterialHandler = (_, material) => {\r\n    setSelectedMaterialType(material)\r\n    if (selectedCrop && selectedMaterialType) { getMaterials(material, selectedCrop.id) };\r\n\r\n  }\r\n\r\n  // call API for get all materials depend on matiral & transgroup id\r\n  const getMaterials = async (materialType, transGroupId) => {\r\n    if (materialType && transGroupId) {\r\n      await getMaterialsListRedux(materialType.id, transGroupId);\r\n      await getDeviceConfigRedux(materialType.deviceType.id, transGroupId);\r\n      await getStrainListRedux(materialType.id, transGroupId);\r\n\r\n    } else {\r\n      console.error(`materialTypeId is ${materialType} or transGroupId ${transGroupId}`)\r\n    }\r\n  }\r\n\r\n\r\n  //call API to set default values to dropdown in top par component\r\n  const getMaterialsTypes = async () => {\r\n    const materialTypes = await getMaterialsTypesList();\r\n    setMaterialTypes(materialTypes)\r\n  }\r\n\r\n  const getListCrops = async () => {\r\n    const crops = await getCropsList();\r\n    setCropsList(crops)\r\n  }\r\n\r\n\r\n  // initially call API for materials type & crop list here \r\n  useEffect(() => {\r\n    getMaterialsTypes()\r\n    getListCrops()\r\n  }, [])\r\n\r\n  return (\r\n    <div className={classes.TopBarWrapper}>\r\n      <Container maxWidth=\"100%\">\r\n        {/* <SearchBar placeholder=\"Search DNA Materials\" /> */}\r\n        <div className={classes.DropDownWrapper}>\r\n          <SelectInput options={materialTypes} defaultValue={materialTypes[0]} renderOption={renderOption} propsType=\"object\" placeholder={DROPDOWN.DNA_MATERIALS}\r\n            onChange={selectMaterialHandler} disableClearable optionsWidth=\"130%\" className={classes.DropDownStyle} />\r\n          <SelectInput presentsProps=\"cropName\" onChange={selectCropHandler} options={crops} propsType=\"object\" placeholder={DROPDOWN.CROP_NAME} className={classes.DropDownStyle} />\r\n\r\n        </div>\r\n        <AuthorizationWrapper allowedRoles={EDIT_ROLES}>\r\n          <div className={classes.ActionWrapper}>\r\n            <CustomButton\r\n              onClick={onClose}\r\n              label={BUTTONS.UNDO}\r\n              classType={CLASS_TYPES.ACTION_SECONDARY_FORM_BTN}\r\n              startIcon={<UndoIcon />}\r\n            />\r\n\r\n            <CustomButton\r\n              onClick={onClose}\r\n              label={BUTTONS.REDO}\r\n              classType={CLASS_TYPES.ACTION_SECONDARY_FORM_BTN}\r\n              startIcon={<RedoIcon />}\r\n            />\r\n          </div>\r\n        </AuthorizationWrapper>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  getMaterialsListRedux: lookupsActions.getMaterials,\r\n  getDeviceConfigRedux: deviceConfigActions.getDeviceConfig,\r\n  getStrainListRedux: strainActions.getStrains,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(memo(TopBar));\r\n","import axios from \"axios\";\r\nimport { CROPS_API } from \"./apiURLs\";\r\n\r\n/**\r\n * list existing crops\r\n */\r\nexport function getCropsList() {\r\n  return axios.get(CROPS_API.BASE_URL);\r\n}\r\n\r\n\r\n","import * as types from \"./actionTypes\";\r\nimport * as api from \"../../api/wellsApi\";\r\n\r\n\r\n\r\n/**\r\n * Get device Configuration for viewing depend on deviceTypeId Id and trans Group Id\r\n * @param {*} deviceTypeId deviceType  Id\r\n * @param {*} transGroupId trans Group Id\r\n */\r\n\r\n/**\r\n * Action to update store with device config list created by system\r\n * @param {*} statuses Materials  lookup\r\n */\r\nexport function setDeviceConfig(config) {\r\n  return { type: types.SET_DEVICE_CONFIG, config };\r\n}\r\n\r\n\r\n\r\nexport function getDeviceConfig(deviceTypeId, transGroupId) {\r\n  return function (dispatch, getState) {\r\n    const { loadingStrains } = getState();\r\n    // the Strains is already loading\r\n    if (loadingStrains) {\r\n      return;\r\n    }\r\n\r\n    return api\r\n      .getDeviceConfig(deviceTypeId, transGroupId)\r\n      .then(config => {\r\n        //dispatch actions\r\n        dispatch(setDeviceConfig(config));\r\n      })\r\n      .catch(error => {\r\n        // eslint-disable-next-line no-console\r\n        console.log(\"Error occurred while fetching the config object\");\r\n        throw error;\r\n      });\r\n  };\r\n}\r\n\r\n","import axios from \"axios\";\r\nimport { DEVICE_CONFIG } from \"./apiURLs\";\r\n\r\n/**\r\n * get device config object \r\n */\r\nexport function getDeviceConfig(deviceTypeId, transGroupId) {\r\n  return axios.get(`${DEVICE_CONFIG.BASE_URL}?deviceTypeId=${deviceTypeId}&transGroupId=${transGroupId}`);\r\n}\r\n\r\n\r\n\r\n\r\n","import * as types from \"./actionTypes\";\r\nimport * as api from \"../../api/strainApi\";\r\n\r\n\r\n\r\n/**\r\n * Get Strains for viewing depend on materialType Id and trans Group Id\r\n * @param {*} materialTypeId materialType Id\r\n * @param {*} transGroupId trans Group Id\r\n */\r\n\r\n/**\r\n * Action to update store with Strains list created by system\r\n * @param {*} statuses Strains  lookup\r\n */\r\nexport function setStrains(strains) {\r\n  return { type: types.SET_STRAINS, strains };\r\n}\r\n\r\n\r\n\r\nexport function getStrains(materialTypeId, transGroupId) {\r\n  return function (dispatch, getState) {\r\n    const { loadingStrains } = getState();\r\n    // the Strains is already loading\r\n    if (loadingStrains) {\r\n      return;\r\n    }\r\n\r\n    return api\r\n      .getStrainList(materialTypeId, transGroupId)\r\n      .then(list => {\r\n        list = list.map((m) => { return { name: m } });\r\n        //dispatch actions\r\n        dispatch(setStrains(list));\r\n      })\r\n      .catch(error => {\r\n        // eslint-disable-next-line no-console\r\n        console.log(\"Error occurred while fetching the strains list\");\r\n        throw error;\r\n      });\r\n  };\r\n}\r\n\r\n","import React, { useState, memo, useEffect } from \"react\";\r\nimport { Box, Grid } from \"@mui/material\";\r\nimport DeviceName from \"../../components/DeviceName/DeviceName\";\r\nimport DNAMaterials from \"../../components/DNAMaterials/DNAMaterials\";\r\nimport TopBar from \"../../components/TopBar/TopBar\";\r\n\r\n\r\nconst StoreStock = () => {\r\n  const [wellsInfo, setWellsInfo] = useState(0);\r\n\r\n\r\n  return <div> <Box sx={{ flexGrow: 1 }}>\r\n    <TopBar />\r\n    <Grid container >\r\n      <Grid item xs={6}>\r\n        <DNAMaterials wellsInfo={wellsInfo} />\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <DeviceName wellsInfoFn={(wells) => setWellsInfo(wells)} />\r\n      </Grid>\r\n    </Grid>\r\n  </Box>\r\n  </div>;\r\n};\r\n\r\n\r\n\r\n\r\nexport default memo(StoreStock);\r\n\r\n"],"names":["CLASS_TYPES","ACTION_LISTING_BTN","ACTION_FORM_BTN","ACTION_SECONDARY_FORM_BTN","CustomButton","classType","className","label","props","classesValue","classes","Button","variant","React","RowContainer","children","res","option","name","findObjFromArrayByProp","array","prop","value","find","v","handelDateFormatter","date","options","day","month","year","Date","toLocaleDateString","filterMaterials","list","key","newList","filter","item","locationId","expired","getMaterialsCategoriesCount","tabList","newTabList","map","count","length","GenerateDropDownList","number","object","i","push","sortListHorizontal","positions","totalPositionsCount","horizontalList","rowNum","Math","sqrt","counter","row","y","generateHorizontalList","sortPositionsHorizontal","includes","toString","replaceObjInListByProps","objList","Error","obj","indexOfItemInArray","findIndex","q","WellsStats","unplaced","placed","memo","Well","well","title","materialName","materialStrainName","handoffDate","Tooltip","placement","WellRow","index","Wells","forwardRef","ref","selectedCellsFun","numOfWells","activeWells","wellStatusFun","bodyRef","useRef","rowLength","newCellsList","wellStatus","wellNum","createCells","myWellRow","useImperativeHandle","resetWells","resetSelectedWells","document","getElementsByClassName","allWells","el","classList","remove","useMemo","dragContainer","selectableTargets","hitRate","selectByClick","selectFromInside","toggleContinueSelect","ratio","onSelect","e","added","forEach","add","selected","removed","id","EMPTY_STATE","WellsStatus","getStrainLocation","transFreezerId","rack","box","axios","STRAIN_LOCATION_API","SelectInputChange","optionsWidth","presentsProps","propsType","disabled","placeholder","onChange","rest","useState","inputValue","setInputValue","localValue","setLocalValue","useEffect","onChangeHandler","_","clearSelect","clearSelectInput","Autocomplete","onInputChange","newInputValue","renderInput","params","TextField","PaperComponent","Paper","sx","width","getOptionLabel","allowedRoles","defaultComponent","roles","useSelector","state","user","some","DeviceName","wellsInfoFn","deviceConfigRedux","wellsRedux","racks","setRacks","defaultRack","setDefaultRack","selectedRack","setSelectedRack","boxes","setBoxes","defaultBox","setDefaultBox","selectedBox","setSelectedBox","wellsActiveLocation","setWellsActiveLocation","setWellStatus","rackInputRef","boxInputRef","wellsRef","prev","getStrainLocationFun","deviceConfigId","locations","current","selectRack","selectBox","onClick","generateAllLists","numOfRacks","rackList","numOfBoxes","boxesList","wellStatusHandler","useCallback","status","setTimeout","renderOption","Container","maxWidth","Breadcrumbs","disableClearable","DROPDOWN","EDIT_ROLES","BUTTONS","wells","wellsInfo","transFreezerFK","connect","deviceConfig","materials","sortMaterials","type","types","setSelectedMaterials","material","resetSelectedMaterials","updateCurrentMaterial","setLoadingMaterials","loadingFlag","CustomTabs","selectHandler","setValue","resetTabsHandler","resetTabs","Tabs","_e","newValue","tab","Tab","SearchBar","onSearchFun","clearInput","clearInputHandler","classesStyle","Search","target","color","disableElevation","MaterialRow","updateCurrentMaterialFn","setSelectedMaterialsFn","M","expired_date","transFreezerName","mapDispatchToProps","lookupsActions","MaterialList","filteredMaterials","isLoading","progressLoading","LOADING","isLoadingMaterials","SelectInput","defaultValue","SnackbarUI","open","alertInfo","message","vertical","horizontal","localOpen","setLocalOpen","Snackbar","anchorOrigin","autoHideDuration","Alert","severity","ConfirmationDialog","isOpen","handleCancelDialog","handleConfirmAction","Dialog","onClose","DialogTitle","DialogActions","CANCEL_BUTTON","CONFIRM_UNEXPIRE_BUTTON","sortOptions","initTabList","SELECT_TABS","DNAMaterials","materialListRedux","filteredMateriaRedux","groupedMateriaRedux","strainList","setGroupSelectedMaterialsFn","sortMaterialsFn","updateAllMaterialsFn","updateActiveWellsFn","setSearchOnMaterialsFn","selectedMaterials","resetSelectedMaterialsFn","selectedType","selectedCropType","selectedDate","handleDateChange","setTabList","proLoading","setProLoading","selectedWillPositions","setSelectedWillPositions","disablePlaceButtons","setDisablePlaceButtons","cellsLength","willList","willPositions","innerText","getWellsPositions","materialsLength","searchBarRef","selectInputRef","strainInputRef","tabsRef","anchorEl","setAnchorEl","dateRange","startDate","endDate","setDateRange","openAlert","setOpenAlert","setAlertInfo","openConfirmation","setOpenConfirmation","openAlertHandler","handleCloseDateRange","Boolean","undefined","resetFilters","onSort","sort","a","b","constructName","handleDateChangeFn","editDate","start","end","getDay","filterByDateRange","optimiseOnSearch","func","timer","args","context","this","clearTimeout","apply","debounce","searchKey","placeMaterials","crossType","sortPositions","validData","selectedMaterialsList","m","ERROR_MESSAGE","wellPos","agroGlycerol","PLACE_MATERIALS","then","SUCCESS_MESSAGE","catch","error","finally","SEARCH_BOX","LABEL","selectedTab","strain","event","currentTarget","Popover","months","maxDate","ranges","direction","staticRanges","inputRanges","selectAllMaterials","console","log","Grid","container","xs","DIALOG_MSG","materialTypeId","UNEXPIRE_MATERIALS","strains","groupedMaterials","TopBar","getMaterialsListRedux","getDeviceConfigRedux","getStrainListRedux","materialTypes","setMaterialTypes","selectedMaterialType","setSelectedMaterialType","crops","setCropsList","selectedCrop","setSelectedCrop","getMaterials","materialType","transGroupId","deviceType","getMaterialsTypes","MATERIALS_TYPES_API","getListCrops","CROPS_API","crop","startIcon","Undo","Redo","dispatch","getState","loadingMaterials","MATERIALS_API","api","deviceTypeId","loadingStrains","DEVICE_CONFIG","config","setDeviceConfig","STRAIN_API","StoreStock","setWellsInfo","Box","flexGrow"],"sourceRoot":""}